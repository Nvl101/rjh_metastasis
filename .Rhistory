library(shiny)
library(shinydashboard)
library(tidyverse)
library(magrittr)
library(tidyr)
library(scales)
library(shinyWidgets)
library(formattable)
library(DT)
library(d3heatmap)
library(R.utils)
library(RColorBrewer)
library(shiny); runApp('rjh_app.R')
library(shiny); runApp('rjh_app.R')
library(rPref)
library(dplyr)
library(formattable)
DATA <- read_csv('test_data.csv', quoted_na = FALSE)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(magrittr)
library(tidyr)
library(scales)
library(shinyWidgets)
library(formattable)
library(DT)
library(d3heatmap)
library(R.utils)
library(RColorBrewer)
source("R/server_utils.R", local = TRUE)
source("R/ui_utils.R", local = TRUE)
DATA <- read_csv('test_data.csv', quoted_na = FALSE)
?read_csv
View(DATA)
USUAL_OPTIONS <- c('low', 'exclude', 'high')
DISTANCE_OPTIONS <- c('close', 'exclude', 'far')
TOTAL_OBJECTIVES <- 10
seq(TOTAL_OBJECTIVES)
all_objectives <- NULL
for (i in seq(TOTAL_OBJECTIVES)) {
all_objectives <- c(all_objectives,
input[[paste0("obj_", as.character(i))]])
}
ui <- dashboardPage(
skin = 'purple',
dashboardHeader(title = "RJH-Metastasis"),
dashboardSidebar(
sidebarMenu(
id = 'mysidebar',
menuItem(
"Essentiality",
tabName = "widgets",
icon = icon("shapes"),
radioButtons(
inputId = 'flt_1',
label = "depMap",
choices = list('essential', 'nonessential'),
selected = 'nonessential'
)
),
menuItem(
"Literature support",
tabName = "widgets",
icon = icon("graduation-cap"),
sliderTextInput01(
"obj_1",
"# of papers, gene in Metastasis context + COAD",
"high"
)
),
menuItem(
"Graph-derived",
tabName = "widgets",
icon = icon("project-diagram"),
sliderTextInput01(
"obj_2",
"# uniqie neighbours connected to a node in full KG",
'exclude'
),
sliderTextInput01(
"obj_3",
"# edges connected to a node in full BIKG",
'exclude'
),
sliderTextInput01(
"obj_4",
"node degree in PPI subgraph",
'exclude'
),
sliderTextInput01(
"obj_5",
"pagerank, (~ popularity) of a node in PPI subgraph",
'high'
),
sliderTextInput01(
"obj_6",
"betweenness (~ node's influence) in PPI subgraph",
'high'
)
),
menuItem(
"Consistency",
tabName = "widgets",
icon = icon("check-double"),
sliderTextInput01(
'obj_7',
"screen in M1A",
'high'
)
),
menuItem(
"Preclinical evidence",
tabName = "widgets",
icon = icon("dna"),
sliderTextInput01(
'obj_8',
"RNAseq, adjusted p-value",
'low'
),
sliderTextInput01(
'obj_9',
"RNAseq, log2 fold change",
'high'
),
sliderTextInput01(
'obj_10',
"RNAseq, DNB",
'high'
)
),
actionBttn(
inputId = "rank",
label = "rank!",
style = "gradient",
color = "royal",
icon = icon("random"),
size = 'sm'
),
actionBttn(
inputId = "reset",
label = "reset",
style = "gradient",
color = "primary",
icon = icon("redo-alt"),
size = 'sm'
)
)
),
dashboardBody(
fluidRow(
box(
title = tagList(shiny::icon("lightbulb"), "How it works"),
status = NULL,
solidHeader = TRUE,
collapsible = TRUE,
includeMarkdown('docs/intro_rjh.md'),
width = 12),
tabBox(
title = 'Optimal hits, tab view',
id = 'tabset1',
width = 12,
tabPanel(
title = tagList(shiny::icon("list-alt"), "Result"),
pickerInput(
inputId = "SortMenu",
label = "Sort top genes by",
choices = list(
'essentiality (depmap)' = c("depmap"),
#'tractability' = c("trct_ab", "trct_sm", 'trct_om'),
'literature support' = c("lit_total"),
'graph-derived' = c('n_neighbours', 'n_edges','degree', 'pagerank', 'betweenness'),
'consistency in M1A screens' = c('full_screen_M1A'),
#'clinical relevance' = c('clin_ES1', 'clin_ES2', 'clin_ES3'),
'expression' = c('TCGA_adjpval', 'TCGA_LFC','DNB')),
selected = 'full_screen',
options = list(size = 5)),
DT::dataTableOutput("TopTable"),
downloadButton('TopDownload',"Download Top results")),
tabPanel(
title = tagList(shiny::icon("question"), "Variables explained"),
includeMarkdown('docs/variables_explained_rjh.md')
)
),
# box(
#   title = 'heatmap controls',
#   id = 'tabsetNLP',
#   width = 2,
#   height="664px",
#   collapsible = TRUE,
#   sliderInput("cluster", "min cluster size",
#               value = 1,
#               min = 1,
#               max = 100,
#               width = '300px'),
#   sliderInput("papers", "min number of papers with gene cluster",
#               value = 1,
#               min = 1,
#               max = 500,
#               width = '300px'),
#   pickerInput(
#     inputId = "gene",
#     label = "select a gene",
#     choices = NLP$ensembl_gene_id,
#     selected = 'ENSG00000171862',
#     choicesOpt = list(
#       subtext = paste("symbol",
#                       NLP$gene,
#                       sep = ": ")))),
# box(
#   title = 'heatmap showing multi-term gene co-occurrence',
#   id = 'heatmapTab',
#   width = 10,
#   collapsible = TRUE,
#   d3heatmapOutput("heatmap", width = "100%", height = '600px')
# ),
tabBox(
title = 'Optimal hits, relative view',
id = 'tabset2',
width = 12,
tabPanel(
title = tagList(shiny::icon("list-alt"), "Optimal hits"),
plotOutput("ParetoBar", height = '1300px')),
tabPanel(
title = tagList(shiny::icon("question"), "Plot explained"),
includeMarkdown('docs/pareto_bar_explained.md')
)
),
box(
title = "Full dataset",
solidHeader = TRUE,
collapsible = TRUE,
DT::dataTableOutput("table"),
width = 12
),
tabBox(
id = 'tabset0',
width = 12,
tabPanel(
title = tagList(shiny::icon("chart-bar"), "Distribution of Pareto levels"),
plotOutput("ParetoHist")),
tabPanel(
title = tagList(shiny::icon("question"), "Plot explained"),
includeMarkdown('docs/pareto_hist_explained.md')
))
))
)
ui
ui$name
ui$attribs
ui$children
View(ui)
input<-ui
input$flt_1
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
?any_filter
runApp('rjh-Metastasis2222.R')
??any_filter
df <- data_frame(x = c(TRUE, TRUE, FALSE),
y = c("Hello", "Hola", "Ciao"),
z = c("World", "ao", "HaOlam")
)
df
df %>%
mutate_at(.vars = vars(y, z),
.funs = ifelse(x, ., NA)
)
df <- data.frame(x = c(TRUE, TRUE, FALSE),
y = c("Hello", "Hola", "Ciao"),
z = c("World", "ao", "HaOlam")
)
df
df %>%
mutate_at(.vars = vars(y, z),
.funs = ifelse(x, ., NA)
)
temp_fn <- function(input) ifelse(test = df[["x"]],
yes = input,
no = NA)
df %>%
mutate_at(.vars = vars(y, z),
.funs = temp_fn)
runApp('rjh_app.R')
ui
server <- function(input, output, session) {
# data for plots & full table
genericdata <- reactive({
# depends on rank action button to delay ranking
input$rank
isolate({
# extract directions for objectives
all_objectives <- NULL
for (i in seq(TOTAL_OBJECTIVES)) {
all_objectives <- c(all_objectives,
input[[paste0("obj_", as.character(i))]])
}
data.prt <- any_filter(DATA, flt_d = input$flt_1) %>%
mutate_at(c('RNAseq_LFC'), abs) %>%
dplyr::select(-c('depmap'))
head(data.prt)
res <- pareto_helper(data.prt,
all_objectives,
num_objectives = TOTAL_OBJECTIVES,
return_pref = FALSE)
})
})
}
runApp('rjh_app.R')
runApp('rjh_app.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
?case_when
x <- 1:50
case_when(
x %% 35 == 0 ~ "fizz buzz",
x %% 5 == 0 ~ "fizz",
x %% 7 == 0 ~ "buzz",
TRUE ~ as.character(x)
)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(magrittr)
library(tidyr)
library(scales)
library(shinyWidgets)
library(formattable)
library(DT)
library(d3heatmap)
library(R.utils)
library(RColorBrewer)
source("R/server_utils.R", local = TRUE)
source("R/ui_utils.R", local = TRUE)
runApp('rjh-Metastasis2222.R')
source("R/server_utils.R", local = TRUE)
source("R/ui_utils.R", local = TRUE)
runApp('rjh-Metastasis2222.R')
source("R/server_utils.R", local = TRUE)
source("R/ui_utils.R", local = TRUE)
runApp('rjh_app.R')
?contains
runApp('rjh_app.R')
runApp('rjh_app.R')
runApp('rjh_app.R')
runApp('rjh_app.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
?box
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
?tabBox
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
?filter
?desc
desc(1:10)
desc(factor(letters))
desc(mass)
starwars
desc(starwars$mass)
arrange(desc(starwars$mass))
starwars %>% arrange(desc(mass))
df <- data.frame(a = 1:3, b = 3:1)
df
df %>% dplyr::arrange(b)
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
runApp('rjh-Metastasis2222.R')
DATA <- read_csv('test_data.csv', quoted_na = FALSE)
metrics_df<-DATA
funs <- case_when(funs == 'close' ~ 'low',
funs == 'far' ~ 'high',
funs == 'min' ~ 'low',
funs == 'max' ~ 'high',
TRUE ~ funs)
funs <- case_when(funs == 'close' ~ 'low',
funs == 'far' ~ 'high',
funs == 'min' ~ 'low',
funs == 'max' ~ 'high',
TRUE ~ funs)
pareto_factory <- function(fun) {
# function factory to produce base pareto preferences
pfun <- get(fun)
return(pfun)
}
names(metrics_df)
vars <- names(metrics_df)[4:ncol(metrics_df)]
num_objectives = TOTAL_OBJECTIVES
names(funs) <- names(vars) <-
sapply(1:num_objectives, function(x)
paste0('obj_', as.character(x)))
num_objectives
sapply(1:num_objectives, function(x)
paste0('obj_', as.character(x)))
names(vars) <-
sapply(1:num_objectives, function(x)
paste0('obj_', as.character(x)))
names(funs) <- names(vars)
runApp('rjh-Metastasis2222.R')
devtools::install_github("chasemc/electricShine")
setwd("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis-V1.0")
library(electricShine)
buildPath <- tempdir()
my_package <-  system.file("demoApp", package = "electricShine")
electricShine::electrify(app_name = "My_App2",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = getwd(),
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/", # 改成清华镜像
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis/node-v10.16.0-win-x64/node-v10.16.0-win-x64")) # 改成自己下载的nodejs路径
electricShine::electrify(app_name = "My_App2",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = getwd(),
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/", # 改成清华镜像
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis/node-v10.16.0-win-x64/node-v10.16.0-win-x64")) # 改成自己下载的nodejs路径
?electrify
electricShine::electrify(app_name = "My_App2",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = getwd(),
mran_date = "2021-05-18",
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/", # 改成清华镜像
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis/node-v10.16.0-win-x64/node-v10.16.0-win-x64")) # 改成自己下载的nodejs路径
electricShine::electrify(app_name = "My_App2",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = getwd(),
mran_date = "2021-05-18",
#cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/", # 改成清华镜像
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis/node-v10.16.0-win-x64/node-v10.16.0-win-x64")) # 改成自己下载的nodejs路径
electricShine::electrify(app_name = "My_App",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = getwd(),
mran_date = "2021-05-18",
#cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/", # 改成清华镜像
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis/node-v10.16.0-win-x64/node-v10.16.0-win-x64")) # 改成自己下载的nodejs路径
my_package
electricShine::electrify(app_name = "test_App",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = getwd(),
mran_date = "2021-05-20",
#cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/", # 改成清华镜像
function_name = "rjh-Metastasis",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis/node-v10.16.0-win-x64/node-v10.16.0-win-x64")) # 改成自己下载的nodejs路径
library(electricShine)
#my_package <-  system.file("demoApp", package = "electricShine")
my_package <- getwd()
electricShine::electrify(app_name = "test_App",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = getwd(),
mran_date = "2021-05-20",
#cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/", # 改成清华镜像
function_name = "rjh-Metastasis",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis/node-v10.16.0-win-x64/node-v10.16.0-win-x64")) # 改成自己下载的nodejs路径
library(shiny); runApp('rjh-Metastasis2222.R')
runApp('D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis-V1.0/R/rjh-Metastasis.R')
runApp('D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis-V1.0/R/rjh-Metastasis.R')
setwd("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis-V1.0")
runApp('R/rjh-Metastasis.R')
setwd("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis-V1.0")
runApp('rjh-Metastasis.R')
runApp('rjh-Metastasis.R')
getwd()
setwd("D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis-V1.0")
library(shiny); runApp('rjh-Metastasis.R')
runApp('rjh-Metastasis.R')
library(shiny); runApp('D:/西鼎云盘/西鼎/客户/推荐系统/rjh-Metastasis-V1.0/rjh-Metastasis.R')
